

class Animal{
   void walk()
   {
      System.out.println("I am walking");
   }
}
  interface Flyable{
  public String canFly();
}

class Bird extends Animal
{
   void fly()
   {
      System.out.println("I am flying");
   }
    void sing()
   {
      System.out.println("I am singing");
   }
   void sound()
   {
      System.out.println("Default");
   }
}

class Duck extends Bird implements Flyable {
  @Override
  public String canFly(){
       return "I can swim";
  }
   void sound()
   {
      System.out.println("Quack, quack");
   }
}

class Chicken extends Bird implements Flyable{
@Override
  public String canFly(){
       return "I cannot fly";
  }
   void sound()
   {
      System.out.println("Cluck, cluck");
   }
}

class rooster extends Chicken{
@Override
   void sound()
   {
      System.out.println("Cock-a-doodle-doo");
   }
}

class Fish extends Animal implements Flyable 
{
  void shapeAndColour(){
      System.out.println("default");
   }
  void behaviour(){
      System.out.println("default");
   }
  @Override
  public String canFly(){
       return "I can swim";
  } 
  
  void walk()
   {
      System.out.println("I dont walk");
   }

    void sing()
   {
      System.out.println("I dont sing");
   }
   
}

class Shark extends Fish {
  
   void shapeAndColour()
   {
      System.out.println("Sharks are large and grey");
   }

   void behaviour()
   {
      System.out.println("Sharks eat other fish");
   }
}

class Clownfish extends Fish {
  
   void shapeAndColour()
   {
      System.out.println("Clownfish are small and colourful (orange)");
   }

   void behaviour()
   {
      System.out.println("Clownfish make jokes");
   }
}

class Dolphin implements Flyable{
  
   @Override
  public String canFly(){
       return "I can swim";
  } 
}

interface Insect {
     boolean fly();
    boolean walk();
    boolean sound();
}

class Butterfly implements Insect {
    public boolean fly() { return true; }
    public boolean walk() { return true; }
    public boolean sound() { return false; }
}

class CaterpillarState implements Insect {
      public  boolean fly() { return false; }
      public boolean walk() { return true; }
      public  boolean sound() { return true; }             
    }

public class Main 
{

   public static void main(String args[])
   {

     Bird bird = new Bird();
      Bird duckbird = new Duck();
      Bird chickenbird = new Chicken();
      Duck duck = new Duck();
      Chicken chicken = new Chicken();
      rooster rooster = new rooster();
     bird.walk();
     bird.fly();
     bird.sing();
     duckbird.sound();
     chickenbird.sound();
     System.out.println(duck.canFly());
     System.out.println(chicken.canFly());

     //b. How is the rooster related to the chicken -it belong to the family of chicken hence used ploymorphism.
     rooster.sound();

//B. Model fish as well as other swimming animals
     Fish fish = new Fish();
     System.out.println(fish.canFly());
     fish.sing();
     fish.walk();

     Shark shark = new Shark();
     Clownfish clownfish = new Clownfish();
     shark.behaviour();
     shark.shapeAndColour();
     clownfish.behaviour();
     clownfish.shapeAndColour();

    Dolphin dolphin = new Dolphin();
     System.out.println(dolphin.canFly());

//D. Model animals that change their behaviour over time
     Insect butterfly = new Butterfly();
     Insect caterpillarState = new CaterpillarState();
     butterfly.fly();
     butterfly.sound();
     caterpillarState.fly();
     caterpillarState.walk();

   
   }
}
